from moviepy.editor import *
import sys
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMainWindow, QInputDialog
from PyQt5.QtWidgets import QLabel, QLineEdit, QFileDialog, QMenu, QMenuBar, QDialog
from second_screen import Ui_Dialog


class VideoEdit(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('screen.ui', self)  ## Загружаем дизайн
        self.setWindowTitle('VideoEditor')

        self.menuBarCreate()

    def menuBarCreate(self):
        self.menu_bar = QMenuBar(self)
        self.setMenuBar(self.menu_bar)

        # Меню работы с файлом
        fileMenu = QMenu('&Файл', self)
        self.menu_bar.addMenu(fileMenu)

        fileMenu.addAction('Открыть', self.file_choose)
        fileMenu.addAction('Сохранить, как...', self.action_clicked)
        fileMenu.addAction('Выход из программы', self.action_clicked)

        # Меню работы с фильтрами
        filterMenu = QMenu('&Фильтры', self)
        self.menu_bar.addMenu(filterMenu)

        lightCorrection = filterMenu.addMenu('&Изменить яркость видео')

        lightCorrection.addAction('Затемнить', self.action_clicked)
        lightCorrection.addAction('Осветлить', self.action_clicked)

        filterMenu.addAction('Негатив', self.action_clicked)

        filterMenu.addAction('Чёрно-белый', self.action_clicked)

        # Меню работы с видео
        vidMenu = QMenu('&Видео', self)
        self.menu_bar.addMenu(vidMenu)

        vid_Rotate = vidMenu.addMenu('&Поворот видео')
        vid_Rotate.addAction('Поворот на 90 градусов по часовой', self.action_clicked)
        vid_Rotate.addAction('Поворот на 90 против по часовой', self.action_clicked)
        vid_Rotate.addAction('Поворот на 180 градусов', self.action_clicked)

        vidAdd = vidMenu.addMenu('&Склеить видео')
        vidAdd.addAction('Перед', self.action_clicked)
        vidAdd.addAction('После', self.action_clicked)

        vidMenu.addAction('Обрезать', self.action_clicked)

        speedChange = vidMenu.addMenu('&Изменить скорость видео')
        speedChange.addAction('Замедлить', self.action_clicked)
        speedChange.addAction('Ускорить', self.action_clicked)

        vid_Resize = vidMenu.addMenu('Изменить размер видео')

        vid_Resize.addAction('Уменьшить размер', self.action_clicked)
        vid_Resize.addAction('Увеличить размер', self.action_clicked)

        vidMenu.addAction('Наложить видео с зелёным фоном', self.action_clicked)

        # Меню работы со звуком
        sound_Menu = QMenu('&Звук', self)
        self.menu_bar.addMenu(sound_Menu)

        volumeChange = sound_Menu.addMenu('&Изменить громкость')
        volumeChange.addAction('Уменьшить', self.action_clicked)
        volumeChange.addAction('Увеличить', self.action_clicked)

        sound_Menu.addAction('Изменить звук вашего видео', self.action_clicked)

        # Меню работы с картинками
        slide_Menu = QMenu('&Слайд-шоу', self)
        self.menu_bar.addMenu(slide_Menu)

        slide_Menu.addAction('Добавить картинку', self.action_clicked)
        self.skip = 0
        imageAdd = slide_Menu.addMenu('&Добавить слайдшоу к основному видео')
        imageAdd.addAction('Перед видео', self.action_clicked)
        imageAdd.addAction('После видео', self.action_clicked)

        # Меню работы с текстом
        vidMenu.addAction('Добавить текст', self.action_clicked)

        help_Menu = QMenu('&Help', self)
        self.menu_bar.addMenu(help_Menu)

        help_Menu.addAction('Открыть пояснение', self.action_clicked)

    def file_choose(self):
        global main_vid, filename
        # Получаем путь к папке
        filename, filetype = QFileDialog.getOpenFileName(self,
                                                         "Выбрать файл",
                                                         ".",
                                                         "MP4 Files(*.mp4)")

        # Создаём переменную с видеофайлом
        if filename == '':
            pass
        else:
            main_vid = VideoFileClip(filename)

            self.with_file_work.setText(f"Идёт работа с видеофайлом: {filename}")
            self.changes.setText('Изменения в вдео:')
            self.w_and_h.setText('Размеры видеофайла:')
            self.video_lenght.setText('Длина видеофайла в секундах:')
            self.fps.setText('Количество кадров в секунду:')
            self.just_x.setText('X')
            w, h = main_vid.size
            self.vid_width.setText(str(w))
            self.vid_height.setText(str(h))
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))
            frames_ps = main_vid.fps
            self.vid_fps.setText(str(frames_ps))

    @QtCore.pyqtSlot()
    def action_clicked(self):
        global main_vid
        # Выход из программы
        if self.sender().text() == 'Выход из программы':
            sys.exit(app.exec_())

        # Сохраняем конечный видеофайл
        if self.sender().text() == 'Сохранить, как...':
            dirlist = QFileDialog.getExistingDirectory(self, "Выбрать папку", ".")
            name_of_file, ok_pressed = QInputDialog.getText(
                self, "Название файла", "Пожалуйтса, укажите конечное название вашего видеофайла")

            if ok_pressed:
                if name_of_file == '':
                    main_vid.write_videofile(dirlist + '/' + 'movie' + '.mp4')
                else:
                    main_vid.write_videofile(dirlist + '/' + name_of_file + '.mp4')

        # Повороот видео
        if self.sender().text() == 'Поворот на 90 градусов по часовой':
            main_vid = main_vid.rotate(-90)
            self.changes.setText(self.changes.text() + f"\n Поворот на 90 градусов по часовой")

        if self.sender().text() == 'Поворот на 90 против по часовой':
            main_vid = main_vid.rotate(90)
            self.changes.setText(self.changes.text() + f"\n Поворот на 90 против по часовой")

        if self.sender().text() == 'Поворот на 180 градусов':
            main_vid = main_vid.rotate(180)
            self.changes.setText(self.changes.text() + f"\n Поворот на 180 градусов")

        # Склеивание видео
        if self.sender().text() == 'Перед':
            filename2, filetype = QFileDialog.getOpenFileName(self,
                                                              "Выбрать файл",
                                                              ".",
                                                              "MP4 Files(*.mp4)")
            clip2 = VideoFileClip(filename2)

            main_vid = concatenate_videoclips([clip2, main_vid])
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))
            self.changes.setText(self.changes.text() + f"\n Перед видео добавлено {filename2}")

        if self.sender().text() == 'После':
            filename2, filetype = QFileDialog.getOpenFileName(self,
                                                              "Выбрать файл",
                                                              ".",
                                                              "MP4 Files(*.mp4)")
            clip2 = VideoFileClip(filename2)

            main_vid = concatenate_videoclips([main_vid, clip2])
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))
            self.changes.setText(self.changes.text() + f"\n После видео добавлено {filename2}")

        # Работа со звуком
        if self.sender().text() == 'Уменьшить':
            self.volume_Decrease()
            main_vid = main_vid.volumex(round(self.num_crease, 2))
            self.changes.setText(
                self.changes.text() + f"\n Громкость видео уменьшена в {round(self.num_crease, 2)} раз")

        if self.sender().text() == 'Увеличить':
            self.volume_Increase()
            main_vid = main_vid.volumex(self.num_crease)
            self.changes.setText(self.changes.text() + f"\n Громкость видео увеличена в {self.num_crease} раз")

        if self.sender().text() == 'Изменить звук вашего видео':
            filename_Sound, filetype = QFileDialog.getOpenFileName(self,
                                                                   "Выбрать файл",
                                                                   ".",
                                                                   "MP4 Files(*.mp4)")
            add_Sound = VideoFileClip(filename_Sound)

            main_vid = main_vid.set_audio(add_Sound.audio)
            self.changes.setText(self.changes.text() + f"\n В ваше видео добавлен звук из видео {filename_Sound}")

        if self.sender().text() == 'Зеркально отразить':
            main_vid = main_vid.fx(vfx.mirror_x)
            self.changes.setText(self.changes.text() + f"\n Видео отражено зеркально")

        if self.sender().text() == 'Замедлить':
            self.speed = 0
            self.changing_Speed()
            main_vid = main_vid.fx(vfx.speedx, round(self.speed_Changing, 2))
            self.changes.setText(
                self.changes.text() + f"\n Ваше видео замедленно в {round(self.speed_Changing, 2)} раз")
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))

        if self.sender().text() == 'Ускорить':
            self.speed = 1
            self.changing_Speed()
            main_vid = main_vid.fx(vfx.speedx, self.speed_Changing)
            self.changes.setText(self.changes.text() + f"\n Ваше видео ускоренно в {self.speed_Changing} раз")
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))

        if self.sender().text() == 'Затемнить':
            self.light = 0
            self.changing_Light()
            main_vid = main_vid.fx(vfx.colorx, self.light_Changing)
            self.changes.setText(self.changes.text() + f"\n Ваше видео затемненно в {self.light_Changing} раз")

        if self.sender().text() == 'Осветлить':
            self.light = 1
            self.changing_Light()
            main_vid = main_vid.fx(vfx.colorx, self.light_Changing + 1)
            self.changes.setText(self.changes.text() + f"\n Ваше видео осветленно в {self.light_Changing + 1} раз")

        if self.sender().text() == 'Добавить картинку':
            global final_image_clip
            filename_Image, filetype = QFileDialog.getOpenFileName(self,
                                                                   "Выбрать файл",
                                                                   ".",
                                                                   "PNG Files(*.png);;Картинка (.jpg);;Картинка (.jpg);;Все файлы (*)")

            num, ok_pressed = QInputDialog.getInt(
                self, "Длительность кадра", "Укажите в секундах, сколько будет длиться ваш кадр",
                1, 1, 100, 2)

            if ok_pressed:
                if self.skip == 0:
                    final_image_clip = ImageClip(filename_Image).set_duration(num)
                    self.skip = 1
                    self.changes_image.setText(f"В слайдшоу добавлено {filename_Image}, длиною {num} секунд")
                else:
                    clip2 = ImageClip(filename_Image).set_duration(num)
                    final_image_clip = concatenate_videoclips([final_image_clip, clip2], method='compose')
                    self.changes_image.setText(
                        self.changes_image.text() + f"\n В слайдшоу добавлено {filename_Image}, длиною {num} секунд")

        if self.sender().text() == 'Перед видео':
            main_vid = concatenate_videoclips([final_image_clip, main_vid])
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))
            self.changes.setText(self.changes.text() + f"\n Перед видео добавлено ваше слайд-шоу")

        if self.sender().text() == 'После видео':
            main_vid = concatenate_videoclips([main_vid, final_image_clip])
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(duration))
            self.changes.setText(self.changes.text() + f"\n После видео добавлено ваше слайд-шоу")

        if self.sender().text() == 'Добавить текст':
            self.get_text_values()
            txt_clip = TextClip(self.text_of_clip, fontsize=self.size_of_text, color=self.color_of_text)
            txt_clip = txt_clip.set_position((self.location_of_text_1, self.location_of_text_2)).set_duration(main_vid.duration)
            main_vid = CompositeVideoClip([main_vid, txt_clip, ])
            self.changes.setText(self.changes.text() + f"\n В ваше видео добавлен текст")

        if self.sender().text() == 'Уменьшить размер':
            self.get_resize_values()
            print(round(1 / self.resize_of_vid, 2))
            main_vid = main_vid.fx(vfx.resize, round(1 / self.resize_of_vid, 2))
            self.changes.setText(self.changes.text() + f"\n Ваше видео уменьшено в {round(1 / self.resize_of_vid, 2)} раз")
            w, h = main_vid.size
            print(w, h)
            self.vid_width.setText(str(w))
            self.vid_height.setText(str(h))

        if self.sender().text() == 'Увеличить размер':
            self.get_resize_values_increase()
            main_vid = main_vid.fx(vfx.resize, self.resize_of_vid)
            self.changes.setText(self.changes.text() + f"\n Ваше видео увеличено в {self.resize_of_vid} раз")
            w, h = main_vid.size
            self.vid_width.setText(str(w))
            self.vid_height.setText(str(h))

        if self.sender().text() == 'Негатив':
            main_vid = main_vid.fx(vfx.invert_colors)
            self.changes.setText(self.changes.text() + f"\n В ваше видео добавлен фильтр негатив")

        if self.sender().text() == 'Чёрно-белый':
            main_vid = main_vid.fx(vfx.blackwhite)
            self.changes.setText(self.changes.text() + f"\n В ваше видео добавлен фильтр чёрно-белое")


        # Обрезка видео
        if self.sender().text() == 'Обрезать':
            self.openCutChanges()
            main_vid = main_vid.subclip(self.cut_since, self.cut_for)
            self.changes.setText(self.changes.text() + f"\n Ваше видео обрезано")
            duration = main_vid.duration
            self.vid_full_lenght.setText(str(round(duration, 2)))

        if self.sender().text() == 'Открыть пояснение':
            self.openHelpWindow()

        if self.sender().text() == 'Наложить видео с зелёным фоном':
            name_of_greenscreen, filetype = QFileDialog.getOpenFileName(self,
                                                             "Выбрать файл",
                                                             ".",
                                                             "MP4 Files(*.mp4)")
            clip = VideoFileClip(name_of_greenscreen)
            masked_clip = clip.fx(vfx.mask_color, color=[0, 255, 8], thr=100, s=5)
            main_vid = CompositeVideoClip([main_vid, masked_clip])

    def openHelpWindow(self):
        widget = QDialog()
        ui = Ui_Dialog()
        ui.setupUi(widget)
        widget.show()

        def widj_close():
            widget.close()

        ui.pushButton.clicked.connect(widj_close)

    def openCutChanges(self):
        num, ok_pressed = QInputDialog.getDouble(
            self, "Обрезать видео", "С какой секунды вы хотите обрезать видео?",
            1, 0, 60, 1)
        if ok_pressed:
            self.cut_since = num
            num, ok_pressed = QInputDialog.getDouble(
                self, "Обрезать видео", "По какую секунду вы хотите обрезать видео?",
                1, 1, 60, 1)
            if ok_pressed:
                self.cut_for = num

    def volume_Decrease(self):
        self.num_crease = 1
        num, ok_pressed = QInputDialog.getInt(
            self, "Уменьшение громкости", "Во сколько раз вы хотите уменьшить громскость?",
            1, 1, 10, 1)
        if ok_pressed:
            self.num_crease = 1 / num

    def volume_Increase(self):
        self.num_crease = 1
        num, ok_pressed = QInputDialog.getInt(
            self, "Увеличение громкости", "Во сколько раз вы хотите увеличить громскость?",
            1, 1, 10, 1)
        if ok_pressed:
            self.num_crease = num

    def changing_Speed(self):
        if self.speed == 0:
            num, ok_pressed = QInputDialog.getInt(
                self, "Изменение скорости", "Во сколько раз вы хотите замедлить видео?",
                1, 1, 5, 1)
            if ok_pressed:
                self.speed_Changing = 1 / num
        if self.speed == 1:
            num, ok_pressed = QInputDialog.getInt(
                self, "замедлить видео", "Во сколько раз вы хотите ускорить видео?",
                1, 1, 5, 1)
            if ok_pressed:
                self.speed_Changing = num

    def changing_Light(self):
        if self.light == 0:
            num, ok_pressed = QInputDialog.getInt(
                self, "Изменение яркости", "На сколько процентов вы хотите затемнить видео?",
                1, 1, 100, 5)
            if ok_pressed:
                self.light_Changing = (num / 100)
        if self.light == 1:
            num, ok_pressed = QInputDialog.getInt(
                self, "Изменение яркости", "На сколько процентов вы хотите осветлить видео?",
                1, 1, 100, 5)
            if ok_pressed:
                self.light_Changing = (num / 100)

    def get_text_values(self):
        text, ok_pressed = QInputDialog.getText(
            self, "Текст", "Пожалуйтса, введите текст для отображения")

        if ok_pressed:
            self.text_of_clip = text

            size, ok_pressed = QInputDialog.getInt(
                self, "Размер шрифта", "Пожалуйста, укажите размер шрифта",
                50, 1, 200, 2)

            if ok_pressed:
                self.size_of_text = size

                color, ok_pressed = QInputDialog.getItem(
                    self, "Цвет шрифта", "Пожалуйста, выберите цвет шрифта",
                    ("white", "black", "red", "green", "yellow", "blue", "purple", "orange"), 1, False)

                if ok_pressed:
                    self.color_of_text = color

                    location_1, ok_pressed = QInputDialog.getItem(
                        self, "Расположение текста", "Пожалуйста, выберите, где будет располагаться ваш текст по горизонтали",
                        ("left", "center", "right"), 1, False)

                    if ok_pressed:
                        self.location_of_text_1 = location_1

                        location_2, ok_pressed = QInputDialog.getItem(
                            self, "Расположение текста",
                            "Пожалуйста, выберите, где будет располагаться ваш текст по вертикали",
                            ("top", "center", "bottom"), 1, False)

                        if ok_pressed:
                            self.location_of_text_2 = location_2


    def get_resize_values(self):
        num, ok_pressed = QInputDialog.getInt(
            self, "Изменение размеров видео", "Во сколько раз вы хотите уменьшить видео?",
            1, 1, 5, 1)

        if ok_pressed:
            self.resize_of_vid = num

    def get_resize_values_increase(self):
        num, ok_pressed = QInputDialog.getInt(
            self, "Изменение размеров видео", "Во сколько раз вы хотите увеличить видео?",
            1, 1, 5, 1)

        if ok_pressed:
            self.resize_of_vid = num


# Запуск программы
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = VideoEdit()
    ex.show()
    sys.exit(app.exec_())
